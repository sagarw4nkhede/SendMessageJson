<?xml version="1.0" encoding="UTF-8"?>
<api context="/" name="SendMessages" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" uri-template="/send/message" faultSequence="onErrorSequence">
        <inSequence>
            <log level="full">
                <property name="INFO" value="Starting integration processing..."/>
            </log>
            <property name="infobipUrl" expression="get-property('infobipUrl')"/>
            <property name="infobipKey" expression="get-property('infobipKey')"/>
            <property name="from" expression="get-property('fromNumber')"/>

            <enrich>
                <source type="body"/>
                <target type="property" property="requestPayload"/>
            </enrich>

            <!-- Dynamically construct the key and fetch buttons -->
            <property name="templateProp" expression="json-eval($.templateName)" scope="default"/>
            <property name="buttons" expression="get-property($ctx:templateProp)" scope="default"/>
            <property name="from" expression="json-eval($.from)" scope="default" />
            <property name="to" expression="json-eval($.to)" scope="default" />
            <property name="language" expression="json-eval($.language)" scope="default" />
            <property name="templateName" expression="json-eval($.templateName)" scope="default" />
            <property name="cttNumber" expression="json-eval($.cttNumber)" scope="default" />
            <property name="videoUrl" expression="json-eval($.videoUrl)" scope="default" />
            <property name="imageUrl" expression="json-eval($.imageUrl)" scope="default" />
            <!-- <property name="placeholders" expression="json-eval($.placeholders)" scope="default" /> -->
            <property name="placeholders" expression="json-eval($.placeholders.*.*)" scope="default" />
            <property name="messageId" expression="json-eval($.messageId)" scope="default" />
            <property name="messageId" expression="json-eval($.messageId)" scope="transport" />
            <!-- If 'language' is not set or empty, assign default value 'en' -->
            <filter xpath="not(string-length(get-property('language')))">
                <then>
                    <property name="language" value="en" scope="default"/>
                    <log>
                        <property name="langNotpres" value="in----------"/>
                    </log>
                </then>
                <else></else>
            </filter>

            <log>
                <property name="buttonsFromLocalEntry" expression="get-property('buttons')"/>
                <property name="templateProp--" expression="get-property('templateProp')"/>
                <property name="buttons-------" expression="get-property('buttons')"/>
                <property name="requestPayload--------" expression="get-property('requestPayload')"/>
                <property name="placeholders--------" expression="get-property('placeholders')"/>
            </log>

            <property name="notifyUrl" value="https://mytestdomain.loca.lt/callback"/>
            <property name="isButtonsPresent" expression="boolean(string-length(get-property('buttons')) > 0)" />
            <property name="isImageUrlPresent" expression="boolean(string-length(get-property('imageUrl')) > 0)" />
            <property name="isVideoUrlPresent" expression="boolean(string-length(get-property('videoUrl')) > 0)" />
            <log>
                <property name="draft_psa_1a_dual-------" expression="get-property('draft_psa_1a_dual')"/>
                <property name="buttons-------" expression="get-property('buttons')"/>
                <property name="isButtonsPresent-------" expression="get-property('isButtonsPresent')"/>
                <property name="isImageUrlPresent-------" expression="get-property('isImageUrlPresent')"/>
                <property name="isVideoUrlPresent-------" expression="get-property('isVideoUrlPresent')"/>
            </log>
            <sequence key="processSeq"/>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" uri-template="/callback">
        <inSequence>
            <sequence key="processCallbackSeq"/>
        </inSequence>
    </resource>
    <resource methods="POST" uri-template="/send">
        <inSequence>
            <enrich>
                <source type="body"/>
                <target type="property" property="requestPayload"/>
            </enrich>
            <property name="to" expression="$ctx:requestPayload/send_to" scope="default"/>
            <property name="messageId" expression="$ctx:requestPayload/msg_id" scope="default"/>
            <payloadFactory description="Create response payload" media-type="json">
                <format>
                    {
                    "to": "$1",
                    "messageCount": 1,
                    "messageId": "$2",
                    "status": "PENDING",
                    "description": "Message sent to next instance"
                    }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('to')"/>
                    <arg evaluator="xml" expression="get-property('messageId')"/>
                </args>
            </payloadFactory>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
</api>